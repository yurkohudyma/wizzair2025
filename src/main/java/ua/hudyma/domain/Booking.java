package ua.hudyma.domain;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "bookings")
@Data
public class Booking {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String confirmationCode;


     //todo –æ–±–º–µ–∂–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–∞ –æ–¥–∏–Ω —Ä–µ–π—Å -
    //todo –û–°–ö–Ü–õ–¨–ö–ò –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —ñ–º–µ–Ω–Ω—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞,
    // todo –≤—ñ–Ω –Ω–µ –º–æ–∂–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ —â–µ –∫–æ–≥–æ—Å—å –æ–∫—Ä—ñ–º —Å–µ–±–µ,
    //  todo –∞ –ª–µ—Ç—ñ—Ç–∏ –Ω–∞ –¥–≤–æ—Ö –º—ñ—Å—Ü—è—Ö –≤—ñ–Ω –Ω–µ –º–æ–∂–µ
     /**–Ø–∫—â–æ Booking –º–∞—î –∑–≤‚Äô—è–∑–æ–∫ User ‚Üî Booking ‚Üî Flight, —ñ —Ü–µ –∑–≤‚Äô—è–∑–æ–∫ @ManyToMany, —Ç–∏ –Ω–µ –∑–º–æ–∂–µ—à –Ω–∞–ø—Ä—è–º—É –∑—Ä–æ–±–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –ê–ª–µ –º–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é-–∑–≤‚Äô—è–∑–æ–∫ —ñ –∑—Ä–æ–±–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Å–∫–ª–∞–¥–µ–Ω–∏–π –∫–ª—é—á:
     üîß –ö—Ä–æ–∫–∏:
    –ó–∞–º—ñ—Å—Ç—å @ManyToMany –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–∫—Ä–µ–º—É Entity UserBooking
    –í –Ω—ñ–π –≤–∫–∞–∑–∞—Ç–∏ @ManyToOne –Ω–∞ User —ñ Booking
    –î–æ–¥–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø–æ (user_id, flight_id)
      */

    @ManyToMany
    @JoinTable(
            name = "user_booking",
            joinColumns = @JoinColumn(name = "booking_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id")
    )
    @JsonIgnore
    private List<User> userList = new ArrayList<>();


    @ManyToOne
    @JoinColumn(name = "flight_id", nullable = false)
    private Flight flight;
    @Positive
    @NotNull
    private BigDecimal price;

    @JsonFormat(pattern = "dd-MM-yyyy")
    @CreationTimestamp
    private Date createdOn;
    @JsonFormat(pattern = "dd-MM-yyyy")
    @UpdateTimestamp
    private Date updatedOn;

    @Enumerated(value = EnumType.STRING)
    private BookingStatus status;

    @OneToMany(mappedBy = "booking")
    private List<Payment> paymentList = new ArrayList<>();


    private enum BookingStatus {
        CONFIRMED,  /** user has approved the flight selection with fixed price */
        PAID,       /** flight price has been paid in full */
        CANCELED,   /** booking has been canceled by WIZZAIR, but STILL is not REBOOKED or REFUNDED */
        REFUNDED,   /** flight has been canceled by USER or WZZ and been refunded if available */
        REBOOKED,   /** flight has been canceled by WZZ and been rebooked by USER */
        RESCHEDULED /** flight has been canceled by WZZ and been rescheduled by USER or SYSTEM */
    }

}
